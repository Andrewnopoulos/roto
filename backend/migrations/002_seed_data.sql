-- Migration: 002_seed_data.sql
-- Description: Seed data for development and testing
-- Created: 2025-07-26

-- Insert initial season
INSERT INTO seasons (id, name, description, start_date, end_date, is_active, settings) VALUES
(
    uuid_generate_v4(),
    'Season 1 - Launch',
    'The inaugural season of Roto multiplayer platform',
    '2025-01-01 00:00:00+00',
    '2025-12-31 23:59:59+00',
    true,
    '{"rating_decay": false, "placement_games": 10, "rating_k_factor": 32}'
);

-- Insert test users for development
INSERT INTO users (id, username, email, password_hash, display_name, is_verified) VALUES
(
    '550e8400-e29b-41d4-a716-446655440001',
    'testuser1',
    'test1@example.com',
    '$2b$10$rOzF5P5B5n5n5n5n5n5n5O5n5n5n5n5n5n5n5n5n5n5n5n5n5n5n5n5',
    'Test Player One',
    true
),
(
    '550e8400-e29b-41d4-a716-446655440002',
    'testuser2',
    'test2@example.com',
    '$2b$10$rOzF5P5B5n5n5n5n5n5n5O5n5n5n5n5n5n5n5n5n5n5n5n5n5n5n5n5',
    'Test Player Two',
    true
),
(
    '550e8400-e29b-41d4-a716-446655440003',
    'testuser3',
    'test3@example.com',
    '$2b$10$rOzF5P5B5n5n5n5n5n5n5O5n5n5n5n5n5n5n5n5n5n5n5n5n5n5n5n5',
    'Test Player Three',
    true
),
(
    '550e8400-e29b-41d4-a716-446655440004',
    'admin',
    'admin@roto.game',
    '$2b$10$rOzF5P5B5n5n5n5n5n5n5O5n5n5n5n5n5n5n5n5n5n5n5n5n5n5n5n5',
    'Administrator',
    true
);

-- Insert user statistics for test users
INSERT INTO user_statistics (user_id, total_games_played, total_wins, total_losses, total_draws, current_rating, peak_rating, current_streak, longest_win_streak) VALUES
(
    '550e8400-e29b-41d4-a716-446655440001',
    15,
    8,
    6,
    1,
    1285,
    1350,
    2,
    4
),
(
    '550e8400-e29b-41d4-a716-446655440002',
    12,
    5,
    7,
    0,
    1145,
    1200,
    -3,
    2
),
(
    '550e8400-e29b-41d4-a716-446655440003',
    8,
    6,
    2,
    0,
    1315,
    1315,
    4,
    4
),
(
    '550e8400-e29b-41d4-a716-446655440004',
    0,
    0,
    0,
    0,
    1200,
    1200,
    0,
    0
);

-- Insert sample completed game
INSERT INTO games (id, room_code, game_type, status, max_players, current_players, winner_id, started_at, ended_at) VALUES
(
    '660e8400-e29b-41d4-a716-446655440001',
    'ABC123',
    'classic',
    'completed',
    2,
    2,
    '550e8400-e29b-41d4-a716-446655440001',
    '2025-07-25 14:30:00+00',
    '2025-07-25 14:45:30+00'
);

-- Insert game participants for the sample game
INSERT INTO game_participants (game_id, user_id, player_position, is_ready, is_active, final_score, placement, rating_before, rating_after, rating_change) VALUES
(
    '660e8400-e29b-41d4-a716-446655440001',
    '550e8400-e29b-41d4-a716-446655440001',
    1,
    true,
    true,
    100,
    1,
    1260,
    1285,
    25
),
(
    '660e8400-e29b-41d4-a716-446655440001',
    '550e8400-e29b-41d4-a716-446655440002',
    2,
    true,
    true,
    75,
    2,
    1170,
    1145,
    -25
);

-- Insert match record for the completed game
INSERT INTO matches (game_id, game_type, total_players, duration_seconds, winner_id, match_result, statistics) VALUES
(
    '660e8400-e29b-41d4-a716-446655440001',
    'classic',
    2,
    930,
    '550e8400-e29b-41d4-a716-446655440001',
    'completed',
    '{"total_moves": 45, "average_move_time": 20.67, "fastest_move": 2.1, "slowest_move": 89.3}'
);

-- Insert initial leaderboard entries (will be generated by current season)
DO $$
DECLARE
    current_season_id UUID;
BEGIN
    SELECT id INTO current_season_id FROM seasons WHERE is_active = true LIMIT 1;
    
    IF current_season_id IS NOT NULL THEN
        INSERT INTO leaderboards (user_id, season_id, game_type, leaderboard_type, rank_position, score, games_played, wins, losses, draws, win_rate, last_game_at) VALUES
        (
            '550e8400-e29b-41d4-a716-446655440003',
            current_season_id,
            'classic',
            'rating',
            1,
            1315,
            8,
            6,
            2,
            0,
            0.7500,
            '2025-07-25 14:45:30+00'
        ),
        (
            '550e8400-e29b-41d4-a716-446655440001',
            current_season_id,
            'classic',
            'rating',
            2,
            1285,
            15,
            8,
            6,
            1,
            0.5333,
            '2025-07-25 14:45:30+00'
        ),
        (
            '550e8400-e29b-41d4-a716-446655440004',
            current_season_id,
            'classic',
            'rating',
            3,
            1200,
            0,
            0,
            0,
            0,
            0.0000,
            NULL
        ),
        (
            '550e8400-e29b-41d4-a716-446655440002',
            current_season_id,
            'classic',
            'rating',
            4,
            1145,
            12,
            5,
            7,
            0,
            0.4167,
            '2025-07-25 14:45:30+00'
        );
    END IF;
END $$;

-- Insert some sample game moves for replay functionality
INSERT INTO game_moves (game_id, user_id, move_number, move_data, duration_ms) VALUES
(
    '660e8400-e29b-41d4-a716-446655440001',
    '550e8400-e29b-41d4-a716-446655440001',
    1,
    '{"type": "place_piece", "position": {"x": 3, "y": 3}, "piece_type": "standard"}',
    3200
),
(
    '660e8400-e29b-41d4-a716-446655440001',
    '550e8400-e29b-41d4-a716-446655440002',
    2,
    '{"type": "place_piece", "position": {"x": 4, "y": 3}, "piece_type": "standard"}',
    5100
),
(
    '660e8400-e29b-41d4-a716-446655440001',
    '550e8400-e29b-41d4-a716-446655440001',
    3,
    '{"type": "place_piece", "position": {"x": 3, "y": 4}, "piece_type": "standard"}',
    2800
),
(
    '660e8400-e29b-41d4-a716-446655440001',
    '550e8400-e29b-41d4-a716-446655440002',
    4,
    '{"type": "place_piece", "position": {"x": 5, "y": 3}, "piece_type": "standard"}',
    4500
);

-- Create a function to generate room codes
CREATE OR REPLACE FUNCTION generate_room_code()
RETURNS VARCHAR(6) AS $$
DECLARE
    chars VARCHAR(36) := 'ABCDEFGHIJKLMNOPQRSTUVWXYZ0123456789';
    result VARCHAR(6) := '';
    i INTEGER;
BEGIN
    FOR i IN 1..6 LOOP
        result := result || substr(chars, floor(random() * length(chars) + 1)::integer, 1);
    END LOOP;
    RETURN result;
END;
$$ LANGUAGE plpgsql;

-- Create a function to update user statistics after a game
CREATE OR REPLACE FUNCTION update_user_statistics_after_game(
    p_user_id UUID,
    p_won BOOLEAN,
    p_draw BOOLEAN,
    p_new_rating INTEGER
)
RETURNS VOID AS $$
BEGIN
    UPDATE user_statistics SET
        total_games_played = total_games_played + 1,
        total_wins = total_wins + CASE WHEN p_won THEN 1 ELSE 0 END,
        total_losses = total_losses + CASE WHEN NOT p_won AND NOT p_draw THEN 1 ELSE 0 END,
        total_draws = total_draws + CASE WHEN p_draw THEN 1 ELSE 0 END,
        current_rating = p_new_rating,
        peak_rating = GREATEST(peak_rating, p_new_rating),
        current_streak = CASE 
            WHEN p_won THEN GREATEST(current_streak + 1, 1)
            WHEN p_draw THEN 0
            ELSE LEAST(current_streak - 1, -1)
        END,
        longest_win_streak = CASE 
            WHEN p_won THEN GREATEST(longest_win_streak, GREATEST(current_streak + 1, 1))
            ELSE longest_win_streak
        END,
        longest_lose_streak = CASE 
            WHEN NOT p_won AND NOT p_draw THEN GREATEST(longest_lose_streak, ABS(LEAST(current_streak - 1, -1)))
            ELSE longest_lose_streak
        END,
        updated_at = CURRENT_TIMESTAMP
    WHERE user_id = p_user_id;
END;
$$ LANGUAGE plpgsql;

-- Create a function to update leaderboard positions
CREATE OR REPLACE FUNCTION refresh_leaderboard(
    p_season_id UUID DEFAULT NULL,
    p_game_type VARCHAR(50) DEFAULT 'classic'
)
RETURNS VOID AS $$
DECLARE
    current_season_id UUID;
BEGIN
    -- Get current season if not provided
    IF p_season_id IS NULL THEN
        SELECT id INTO current_season_id FROM seasons WHERE is_active = true LIMIT 1;
    ELSE
        current_season_id := p_season_id;
    END IF;
    
    -- Delete existing leaderboard entries for this season and game type
    DELETE FROM leaderboards 
    WHERE season_id = current_season_id 
    AND game_type = p_game_type;
    
    -- Insert new leaderboard entries based on current ratings
    INSERT INTO leaderboards (
        user_id, season_id, game_type, leaderboard_type, rank_position, 
        score, games_played, wins, losses, draws, win_rate, last_game_at
    )
    SELECT 
        us.user_id,
        current_season_id,
        p_game_type,
        'rating',
        ROW_NUMBER() OVER (ORDER BY us.current_rating DESC, us.total_wins DESC, us.total_games_played DESC),
        us.current_rating,
        us.total_games_played,
        us.total_wins,
        us.total_losses,
        us.total_draws,
        CASE 
            WHEN us.total_games_played > 0 THEN us.total_wins::DECIMAL / us.total_games_played
            ELSE 0
        END,
        (SELECT MAX(m.created_at) 
         FROM matches m 
         JOIN game_participants gp ON m.game_id = gp.game_id 
         WHERE gp.user_id = us.user_id AND m.game_type = p_game_type)
    FROM user_statistics us
    JOIN users u ON us.user_id = u.id
    WHERE u.is_active = true
    ORDER BY us.current_rating DESC, us.total_wins DESC, us.total_games_played DESC;
END;
$$ LANGUAGE plpgsql;